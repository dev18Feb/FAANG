// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code 

class Solution
{
	// Code here
	class BFSNODE
	{
	public:
		int timeframe;
		int x, y;
	};

public:
	void  BFSTraverse(BFSNODE& a, vector<vector<int>>& grid1, std::queue<BFSNODE>&list)
	{
		int x = a.x;
		int y = a.y;
		int row = grid1.size();
		int column = grid1[0].size();
//std::cout << "x:" << x << "y:" << y<<std::endl;
		if ((x + 1 < row) && (grid1[x + 1][y] == 1))
		{
			list.push(BFSNODE{ a.timeframe + 1, x + 1, y });
			grid1[x + 1][y] = 2;
		}

		if (x - 1 >= 0 && (grid1[x -1][y] == 1))
		{
			list.push(BFSNODE{ a.timeframe + 1, x - 1 , y });
			grid1[x - 1][y] = 2;
		}


		if ((y + 1 < column) && (grid1[x][y + 1] == 1))
		{
			list.push(BFSNODE{ a.timeframe + 1, x, y + 1 });
			grid1[x][y + 1] = 2;
		}

		if (y - 1 >= 0 && (grid1[x][y - 1] == 1))
		{
			list.push(BFSNODE{ a.timeframe + 1, x , y - 1 });
			grid1[x][y - 1] = 2;
		}

	}
	//Function to find minimum time required to rot all oranges. 
	int orangesRotting(vector<vector<int>>& grid)
	{
		std::queue<BFSNODE>list;
		int Totalsize = 0, TwoCount = 0;
		for (int v1 = 0;v1 < grid.size(); v1++)
		{
			for (int v2 = 0; v2 < grid[v1].size(); v2++)
			{
				if (grid[v1][v2] == 2)
				{
					list.push(BFSNODE{ 0, v1, v2 });
				}
				if (grid[v1][v2] == 0)
				{
					continue;
				}
				Totalsize++;
			}
		}
     	BFSNODE a;
		while (!list.empty())
		{
			a = list.front();
			list.pop();
			TwoCount++;
			BFSTraverse(a, grid, list);
			
		}
		if (TwoCount == Totalsize)
		{
			return a.timeframe;
		}
		return -1;
	}
};


// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		int ans = obj.orangesRotting(grid);
		cout << ans << "\n";
	}
	return 0;
}  // } Driver Code Ends
